import os
from dotenv import load_dotenv

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    CallbackQueryHandler, ConversationHandler,
    ContextTypes, filters
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
LOGIN_ACCOUNT, LOGIN_PASSWORD, LOGIN_PIN, MENU = range(4)
TRANSFER_ACCOUNT, TRANSFER_AMOUNT, TRANSFER_CONFIRM = range(4, 7)

# –£—Å–ª–æ–≤–Ω–∞—è –ë–î
users_db = {
    "BOM0": {"password": "zxcvBnm5", "pin": "0678", "balance": 1175, "user_id": None},
    "BOMNoName1042": {"password": "abobus2021", "pin": "2010", "balance": 1700, "user_id": None},
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("account"):
        return await show_menu(update, context)
    await update.message.reply_text("üîê –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞:")
    return LOGIN_ACCOUNT

async def login_account(update: Update, context: ContextTypes.DEFAULT_TYPE):
    acc = update.message.text.strip()
    if acc not in users_db:
        await update.message.reply_text("‚ùå –°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë:")
        return LOGIN_ACCOUNT
    context.user_data["account"] = acc
    await update.message.reply_text("üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    return LOGIN_PASSWORD

async def login_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pwd = update.message.text.strip()
    acc = context.user_data["account"]
    if pwd != users_db[acc]["password"]:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë:")
        return LOGIN_PASSWORD
    await update.message.reply_text("üí≥ –í–≤–µ–¥–∏—Ç–µ PIN-–∫–æ–¥:")
    return LOGIN_PIN

async def login_pin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pin = update.message.text.strip()
    acc = context.user_data["account"]
    if pin != users_db[acc]["pin"]:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π PIN. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë:")
        return LOGIN_PIN
    users_db[acc]["user_id"] = update.effective_user.id
    return await show_menu(update, context)

async def show_menu(update_or_query, context: ContextTypes.DEFAULT_TYPE):
    acc = context.user_data["account"]
    kb = [
        [InlineKeyboardButton("üíé –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
        [InlineKeyboardButton("üíé –ü–µ—Ä–µ–≤–µ—Å—Ç–∏", callback_data="transfer")],
        [InlineKeyboardButton("üö™ –í—ã–π—Ç–∏", callback_data="logout")],
    ]
    markup = InlineKeyboardMarkup(kb)
    if update_or_query.callback_query:
        await update_or_query.callback_query.answer()
        await update_or_query.callback_query.edit_message_text(
            f"üëã {acc}, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup
        )
    else:
        await update_or_query.message.reply_text(
            f"üëã {acc}, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup
        )
    return MENU

async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    action = query.data
    acc = context.user_data["account"]

    if action == "balance":
        await query.answer()
        await query.edit_message_text(
            f"üíé –í–∞—à –±–∞–ª–∞–Ω—Å: {users_db[acc]['balance']} üíé",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")]
            ])
        )
        return MENU

    if action == "transfer":
        await query.answer()
        await query.edit_message_text("üì• –í–≤–µ–¥–∏—Ç–µ —Å—á—ë—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")
        return TRANSFER_ACCOUNT

    if action == "logout":
        context.user_data.clear()
        await query.answer()
        await query.edit_message_text("‚úÖ –í—ã –≤—ã—à–ª–∏. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –≤—Ö–æ–¥–∞.")
        return ConversationHandler.END

    if action == "menu":
        return await show_menu(update, context)

async def transfer_account(update: Update, context: ContextTypes.DEFAULT_TYPE):
    target = update.message.text.strip()
    if target not in users_db:
        await update.message.reply_text("‚ùå –°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë:")
        return TRANSFER_ACCOUNT
    if target == context.user_data["account"]:
        await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–∞–º–æ–º—É —Å–µ–±–µ. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å—á—ë—Ç:")
        return TRANSFER_ACCOUNT
    context.user_data["target"] = target
    await update.message.reply_text("üì• –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞ (—á–∏—Å–ª–æ–º):")
    return TRANSFER_AMOUNT

async def transfer_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    acc = context.user_data["account"]
    text = update.message.text.strip()
    try:
        amount = float(text)
    except:
        await update.message.reply_text("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë:")
        return TRANSFER_AMOUNT

    if amount > 1000:
        await update.message.reply_text(
            "‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞, –ø—Ä–æ—Å–∏–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ @NoName1042"
        )
        return await show_menu(update, context)

    if amount <= 0 or users_db[acc]["balance"] < amount:
        await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë:")
        return TRANSFER_AMOUNT

    context.user_data["amount"] = amount
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    kb = [
        [InlineKeyboardButton("‚úÖ –î–∞", callback_data="yes")],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="no")],
    ]
    await update.message.reply_text(
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ {amount} üíé –Ω–∞ —Å—á—ë—Ç {context.user_data['target']}:",
        reply_markup=InlineKeyboardMarkup(kb)
    )
    return TRANSFER_CONFIRM

async def transfer_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    choice = query.data
    acc = context.user_data["account"]
    target = context.user_data["target"]
    amount = context.user_data["amount"]

    if choice == "yes":
        users_db[acc]["balance"] -= amount
        users_db[target]["balance"] += amount
        await query.edit_message_text(
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {amount} üíé –Ω–∞ {target}.\n"
            f"üíé –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {users_db[acc]['balance']} üíé"
        )
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        rid = users_db[target]["user_id"]
        if rid:
            await context.bot.send_message(
                chat_id=rid,
                text=f"üí∏ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {amount} üíé –æ—Ç {acc}. –ë–∞–ª–∞–Ω—Å: {users_db[target]['balance']} üíé"
            )
    else:
        await query.edit_message_text("‚ùå –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.")
    return await show_menu(update, context)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. /start")
    return ConversationHandler.END

def main():
    app = Application.builder().token(BOT_TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            LOGIN_ACCOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, login_account)],
            LOGIN_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, login_password)],
            LOGIN_PIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, login_pin)],
            MENU: [CallbackQueryHandler(menu_handler)],
            TRANSFER_ACCOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, transfer_account)],
            TRANSFER_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, transfer_amount)],
            TRANSFER_CONFIRM: [CallbackQueryHandler(transfer_confirm, pattern="^(yes|no)$")],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
        per_chat=True,
    )

    app.add_handler(conv)
    app.run_polling()

if __name__ == "__main__":
    main()
